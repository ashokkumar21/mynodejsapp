pipeline 
{
    agent any
    
    /* Declaring the environment variables for fetching the latest docker version with docker tag. We can get this from jenkins configuration tools*/
    environment
    {
        DOCKER_TAG = getDockerTag()
    }
    stages
    {
        
    	/* Pull the gitrepo through scm changes by the team */
        stage('Git Checkout')
	{
		git credentialsId: 'github', 
		    url: 'https://github.com/ashokkumar21/mynodejsapp',
			branch: "${params.gitBranch}"
	}
	
	stage('Install dependencies')
	{
		steps
		{
			sh 'npm install'
		}
	}
	
        stage('Build Docker Image')
	{
            steps
	    {
                sh "docker build . -t ashokkumar21/mynodejsapp:${DOCKER_TAG} "
            }
        }
        stage('DockerHub Push')
	{
            steps
	    {
                withCredentials([string(credentialsId: 'docker-hub', variable: 'dockerHubPwd')]) 
		{
                    sh "docker login -u username -p ${dockerHubPwd}"
                    sh "docker push username/mynodejsapp:${DOCKER_TAG}"
                }
            }
	}
	/* Launching the img on kubernetes cluster */
        stage('Deploy to k8s')
	{
            steps
	    {
                sh "chmod +x changeTag.sh"
                sh "./changeTag.sh ${DOCKER_TAG}"
                sshagent(['kops-machine']) 
		{
                    sh "scp -o StrictHostKeyChecking=no services.yml node-app-pod.yml ec2-user@someip:/home/ec2-user/"
                    script
		    {
                        try
			{
                            sh "ssh ec2-user@yourip kubectl apply -f ."
                        }
			catch(error)
			{
                            sh "ssh ec2-user@yourip kubectl create -f ."
                        }
                    }
                }
            }
        }
	stage('Deploy to Production server')
	{
            steps
	    {
                ansiblePlaybook extras: "-e tag=${env.DOCKER_TAG}", 
                                credentialsId: 'slave-one', 
                                playbook: 'docker-deploy.yml',
                                inventory: 'dev.inventory'
            }
        }
    }
}
def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}
